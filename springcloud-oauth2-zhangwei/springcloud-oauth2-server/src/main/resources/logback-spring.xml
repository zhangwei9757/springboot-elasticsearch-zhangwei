<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <!-- 输出sql信息,mapper 包路径 -->
    <logger name="com.microservice.mapper" level="DEBUG"/>

    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="logs"/>
    <!-- 定义日志文件名称 -->
    <property name="appName" value="oauth2Server"/>

    <property name="smtpHost" value="smtp.qq.com"/>
    <property name="to" value="ss@ss.cn"/>
    <property name="from" value="ss@qq.com"/>
    <property name="username" value="ss"/>
    <property name="password" value="ss"/>

    <!--
    日志输出格式：
        %d表示日期时间，
        %thread表示线程名，
        %-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
        %msg：日志消息，
        %n是换行符
    -->
    <property name="console_pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} === [%thread] === %-5level %logger{50} - %msg%n"/>
    <property name="file_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} === [%thread] === %-5level %logger{50} - %msg%n"/>

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="log_console" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${console_pattern}</pattern>
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="log_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>7</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
            注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${file_pattern}</pattern>
        </layout>
        <!--		<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
        <!--			<level>INFO</level>-->
        <!--			<onMatch>ACCEPT</onMatch>-->
        <!--			<onMismatch>DENY</onMismatch>-->
        <!--		</filter>-->
    </appender>

    <!--	<appender name="log_email" class="ch.qos.logback.classic.net.SMTPAppender">-->
    <!--		&lt;!&ndash;smtp 服务器&ndash;&gt;-->
    <!--		<smtpHost>${smtpHost}</smtpHost>-->
    <!--		&lt;!&ndash;port&ndash;&gt;-->
    <!--		<smtpPort>25</smtpPort>-->
    <!--		&lt;!&ndash; 发给谁的邮件列表，多个人用逗号分隔 &ndash;&gt;-->
    <!--		<to>${to}</to>-->
    <!--		&lt;!&ndash;发件人，添加邮箱和上面的username保持一致&ndash;&gt;-->
    <!--		<from>${from}</from>-->
    <!--		<subject>${appName} - %-5level：%logger</subject>-->
    <!--		&lt;!&ndash;发件人的邮箱&ndash;&gt;-->
    <!--		<username>${username}</username>-->
    <!--		&lt;!&ndash;发件人的邮箱密码&ndash;&gt;-->
    <!--		<password>${password}</password>-->
    <!--		<SSL>false</SSL>-->
    <!--		&lt;!&ndash;是否异步&ndash;&gt;-->
    <!--		<asynchronousSending>true</asynchronousSending>-->
    <!--		<layout class="ch.qos.logback.classic.PatternLayout">-->
    <!--			<pattern>${file_pattern}</pattern>-->
    <!--		</layout>-->
    <!--		<cyclicBufferTracker class = "ch.qos.logback.core.spi.CyclicBufferTracker" >-->
    <!--			<bufferSize> 1 </bufferSize>-->
    <!--		</cyclicBufferTracker>-->
    <!--		&lt;!&ndash;过滤器&ndash;&gt;-->
    <!--		&lt;!&ndash; 这里采用等级过滤器 指定等级相符才发送 &ndash;&gt;-->
    <!--		<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
    <!--			<level>ERROR</level>-->
    <!--			<onMatch>ACCEPT</onMatch>-->
    <!--			<onMismatch>DENY</onMismatch>-->
    <!--		</filter>-->
    <!--	</appender>-->

    <!--
        logger主要用于存放日志对象，也可以定义日志类型、级别
        name：表示匹配的logger类型前缀，也就是包的前半部分
        level：要记录的日志级别由低到高，包括 TRACE < DEBUG < INFO < WARN < ERROR
        additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
            false：表示只用当前logger的appender-ref，
            true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- app logger -->
    <logger name="com.jh" level="info" additivity="true">
        <!-- <appender-ref ref="log_console"/> -->
        <appender-ref ref="log_file"/>
        <!--		<appender-ref ref="log_email"/>-->
    </logger>

    <root level="info">
        <!--<appender-ref ref="log_console"/>-->
        <appender-ref ref="log_file"/>
    </root>

</configuration>